gather(-quality,key = "var",value = "value")%>%
ggplot(aes(x = value,y =quality ))+
facet_wrap(~var,scales = "free")+
geom_point()+
stat_smooth()
knitr::opts_chunk$set(echo = TRUE)
#load the dataset
Data2<- read.csv("Wine.csv")
Data3<-read.csv("Wine.csv")
library(ggplot2)
library(tidyverse)
library(GGally)
#shape
dim(Data2)
str(Data2)
#if there are missing values
colSums(is.na(Data2))
#check summary
summary(Data2)
#Its an all numeric variable
boxplot(Data2)
boxplot(Data2[,1:12])
#check correlation
cor(Data2)
colnames(Data2)<-c("fixed_acidity", "volatile_acidity","citric_acid","residual_sugar","chlorides","free_sudioxide ","total_sudioxide ","density","pH ","sulphates" ,"alcohol","quality")
names(Data2)
#normalize the data
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
data_nom<-as.data.frame(lapply(Data2[1:11],normalize))
summary(data_nom)
hist(
Data2$fixed_acidity,
main = "Fixed acidity distribution",
col = "red",
xlab = "fixed acidy",
ylab = "count"
)
hist(
Data2$volatile_acidity,
main = "volatile acidity distribution",
col = "red",
xlab = "volatile acidy",
ylab = "count"
)
hist(
Data2$citric_acid,
main = "citric distribution",
col = "red",
xlab = "citric acidy",
ylab = "count"
)
hist(
Data2$residual_sugar,
main = "residual_sugar distribution",
col = "red",
xlab = "residual sugar",
ylab = "count"
)
hist(
Data2$chlorides,
main = "chlorides distribution",
col = "red",
xlab = "chlorides",
ylab = "count"
)
hist(
Data2$`free_sudioxide `,
main = "free suphur dioxide distribution",
col = "red",
xlab = "free sulphur ",
ylab = "count"
)
hist(
Data2$`total_sudioxide `,
main = "total sulphur dioxide distribution",
col = "red",
xlab = "total dioxide",
ylab = "count"
)
hist(
Data2$density,
main = " distribution",
col = "red",
xlab = "density",
ylab = "count"
)
hist(
Data2$`pH `,
main = "ph distribution",
col = "red",
xlab = "PH",
ylab = "count"
)
hist(
Data2$sulphates,
main = "sulphates distribution",
col = "red",
xlab = "sulphates",
ylab = "count"
)
hist(
Data2$alcohol,
main = "alcohol distribution",
col = "red",
xlab = "alcohol",
ylab = "count"
)
quality = Data3$quality
Data1<-cbind(data_nom,quality)
head(Data1)
str(Data1)
head(Data1)
boxplot(sulphates~quality,data = Data1)
#par(mfrow=c(2,5))
for (i in 1:length(Data1)) {
boxplot(Data1[,i], main=names(Data1[i]), type="l")
}
#par(mfrow=c(2,5))
for (i in 1:length(Data1)) {
hist(Data1[,i],xlab =names(Data1[,i]) )
}
library(psych)
multi.hist(Data1,density=TRUE,freq=T,bcol = "red",dcol=c("black","black"),dlty=c("dashed","dotted",main =NULL,breaks = 21))
#multi hist is an easier way of checking distribution
?multi.hist
library(GGally)
ggcorr(Data1)
ggpairs(Data1)
Data1%>%
gather(-quality,key = "var",value = "value")%>%
ggplot(aes(x = value,y =quality ))+
facet_wrap(~var,scales = "free")+
geom_point()+
stat_smooth()
Data1%>%
gather(-quality,key = "var",value = "value")%>%
ggplot(aes(x = value,y =quality ))+
facet_wrap(~var,scales = "free")+
geom_point()+
geom_smooth()
Data1%>%
gather(key = "var",value = "value")%>%
ggplot(aes(x = value,y =quality ))+
facet_wrap(~var,scales = "free")+
geom_point()+
geom_smooth()
Data1%>%
gather(-quality,key = "var",value = "value")%>%
ggplot(aes(x = value,y =quality ))+
facet_wrap(~var,scales = "free")+
geom_point()+
geom_smooth()
Data1%>%
gather(-quality,key = "var",value = "value")%>%
ggplot(aes(x = value,y =quality ))+
facet_wrap(~var,scales = "free")+
geom_jitter()+
geom_smooth()
#now lets do EDA
?options()
#now lets do bivariate EDA
#now lets do bivariate EDA
Data1%>%
correlate()%>%
to_correlation_matrix()
Data1%>%
gather(-quality,key = "var",value = "value")%>%
ggplot(aes(x = value,y =quality ))+
facet_wrap(~var,scales = "free")+
geom_jitter()+
geom_smooth()
#now lets do bivariate EDA
Data1%>%
correlate()%>%
to_correlation_matrix()
Data1%>%
gather(-quality,key = "var",value = "value")%>%
ggplot(aes(x = value,y =quality ))+
facet_wrap(~var,scales = "free")+
geom_jitter()+
geom_smooth(method = "lm")
#now lets do bivariate EDA
options(repr.plot.width = 11, repr.plot.height = 5)
ggplot(Data1, aes(chlorides, alcohol)) +
geom_point() + theme(legend.position = 'none') +
labs(x='Product related', y ='Product related duration')
p1
#now lets do bivariate EDA
options(repr.plot.width = 11, repr.plot.height = 5)
ggplot(Data1, aes(x = chlorides, y = alcohol)) +
geom_point() + theme(legend.position = 'none') +
labs(x='chlorides', y ='alcohol')
#now lets do bivariate EDA
options(repr.plot.width = 11, repr.plot.height = 5)
ggplot(Data1, aes(x = chlorides, y = alcohol)) +
geom_jitter() + theme(legend.position = 'none') +
labs(x='chlorides', y ='alcohol')
#now lets do bivariate EDA
#options(repr.plot.width = 11, repr.plot.height = 5)
ggplot(Data1, aes(x = chlorides, y = alcohol)) +
geom_jitter() + theme(legend.position = 'none') +
labs(x='chlorides', y ='alcohol')
#now lets do bivariate EDA
#options(repr.plot.width = 11, repr.plot.height = 5)
ggplot(Data1, aes(x = chlorides, y = alcohol)) +
geom_jitter() + theme(legend.position = 'none') +
labs(x='chlorides', y ='alcohol')
ggplot(Data1, aes(x = density, y =alcohol )) +
geom_jitter() + theme(legend.position = 'none') +
labs(x='density', y ='alcohol')
ggplot(Data1, aes(x = density, y =alcohol )) +
geom_jitter() + theme(legend.position = 'none') +
labs(x='density', y ='alcohol')+
geom_smooth(method = "lm")
ggplot(Data1, aes(x = citric_acid, y = alcohol)) +
geom_jitter() + theme(legend.position = 'none') +
labs(x='citric_acid', y ='alcohol')
ggplot(Data1, aes(x = citric_acid, y = alcohol)) +
geom_jitter() + theme(legend.position = 'none') +
labs(x='citric_acid', y ='alcohol')+
geom_abline()
ggplot(Data1, aes(x = residul_sugar, y = alcohol)) +
geom_jitter() + theme(legend.position = 'none') +
labs(x='chlorides', y ='alcohol')
ggplot(Data1, aes(x = residual_sugar, y = alcohol)) +
geom_jitter() + theme(legend.position = 'none') +
labs(x='chlorides', y ='alcohol')
library(caret)
model<-lm()
library(caret)
index<-createDataPartition(Data1$quality,list = F,p = 0.8)
index
#split the training and the testing
train<-Data1[index,]
#split the training and the testing
train<-Data1[index,]
test <-Data1[-index,]
sample_n(train,3)
sample_n(test,3)
#check the splits
sample_n(train,3)
dim.data.frame(train)
sample_n(test,3)
#check the splits
sample_n(train,3)
dim.data.frame(test)
sample_n(test,3)
#lets start with the linear regression
#first we use some varibles, alcohol,fixed_acidity,chlorides,density
model<-lm(quality~alcohol+fixed_acidity+chlorides,density,data = train)
#lets start with the linear regression
#first we use some varibles, alcohol,fixed_acidity,chlorides,density
model<-lm(quality~alcohol+fixed_acidity+chlorides,density,data = train)
pred<-predict(model,test)
#lets start with the linear regression
#first we use some varibles, alcohol,fixed_acidity,chlorides,density
model<-lm(quality~alcohol+fixed_acidity+chlorides,density,data = train)
pred<-predict(model,test)
varImp(model)
#lets start with the linear regression
#first we use some varibles, alcohol,fixed_acidity,chlorides,density
model<-lm(quality~alcohol+fixed_acidity+chlorides,density,data = train)
pred<-predict(model,test)
mean(pred==test$quality)
#lets start with the linear regression
#first we use some varibles, alcohol,fixed_acidity,chlorides,density
model<-lm(quality~alcohol+fixed_acidity+chlorides,data = train)
pred<-predict(model,test)
mean(pred==test$quality)
#very poor perfomance
#lets start with the linear regression
#first we use some varibles, alcohol,fixed_acidity,chlorides,density
model<-lm(quality~alcohol+fixed_acidity+chlorides,data = train)
pred<-predict(model,test)
mean(pred==test$quality)
#very poor perfomance
#lets start with the linear regression
#first we use some varibles, alcohol,fixed_acidity,chlorides,density
model<-lm(quality~alcohol+fixed_acidity+chlorides+pH,data = train)
#lets start with the linear regression
#first we use some varibles, alcohol,fixed_acidity,chlorides,density
model<-lm(quality~alcohol+fixed_acidity+chlorides+PH,data = train)
ggplot(Data1, aes(x = residual_sugar, y = alcohol)) +
geom_jitter() + theme(legend.position = 'none') +
labs(x='residual_sugar', y ='alcohol')
#lets start with the linear regression
#first we use some varibles, alcohol,fixed_acidity,chlorides,density
model<-lm(quality~alcohol+fixed_acidity+chlorides+citric_acid,data = train)
pred<-predict(model,test)
mean(pred==test$quality)
#very poor perfomance
#lets start with the linear regression
#first we use some varibles, alcohol,fixed_acidity,chlorides,density
model<-lm(quality~alcohol+fixed_acidity+chlorides+citric_acid,data = train)
pred<-predict(model,test)
mean(pred$predictions==test$quality)
#lets start with the linear regression
#first we use some varibles, alcohol,fixed_acidity,chlorides,density
model<-lm(quality~alcohol+fixed_acidity+chlorides+citric_acid,data = train)
pred<-predict(model,test)
#very poor perfomance
#lets start with the linear regression
#first we use some varibles, alcohol,fixed_acidity,chlorides,density
model<-lm(quality~alcohol+fixed_acidity+chlorides+citric_acid,data = train)
pred<-predict(model,test)
summary(model)
#very poor perfomance
#lets start with the linear regression
#first we use some varibles, alcohol,fixed_acidity,chlorides,density
model<-lm(quality~alcohol,data = train)
pred<-predict(model,test)
summary(model)
#very poor perfomance
#lets start with the linear regression
#first we use some varibles, alcohol,fixed_acidity,chlorides,density
model<-lm(quality~.,data = train)
pred<-predict(model,test)
summary(model)
#very poor perfomance
#lets start with the linear regression
#first we use some varibles, alcohol,fixed_acidity,chlorides,density
model<-lm(quality~.,data = train)
pred<-predict(model,test)
summary(model)
res = pred - test$quality
#very poor perfomance
#lets start with the linear regression
#first we use some varibles, alcohol,fixed_acidity,chlorides,density
model<-lm(quality~.,data = train)
pred<-predict(model,test)
summary(model)
res = pred - test$quality
?rsme
#very poor perfomance
#lets start with the linear regression
#first we use some varibles, alcohol,fixed_acidity,chlorides,density
model<-lm(quality~.,data = train)
pred<-predict(model,test)
summary(model)
res = pred - test$quality
?rsme
#very poor perfomance
#lets start with the linear regression
#first we use some varibles, alcohol,fixed_acidity,chlorides,density
model<-lm(quality~.,data = train)
pred<-predict(model,test)
summary(model)
res = pred - test$quality
rsme = sqrt(mean(res^2))
#very poor perfomance
#lets start with the linear regression
#first we use some varibles, alcohol,fixed_acidity,chlorides,density
model<-lm(quality~.,data = train)
pred<-predict(model,test)
summary(model)
res = pred - test$quality
rsme = sqrt(mean(res^2))
rsme
#very poor perfomance
library(randomForest)
model1<-randomForest(quality~.,data= train,num.trees = 500)
library(randomForest)
model1<-randomForest(quality~.,data= train,num.trees = 500)
summary(model1)
library(randomForest)
model1<-randomForest(quality~alcohol+sulphates+chlorides,data= train,num.trees = 500)
?randomForest
pred1<-predict()
library(randomForest)
model1<-randomForest(quality~alcohol+sulphates+chlorides,data= train,num.trees = 500)
?randomForest
pred1<-predict(model1,train)
summary(model1)
library(randomForest)
model1<-randomForest(quality~alcohol+sulphates+chlorides,data= train,num.trees = 500)
?randomForest
pred1<-predict(model1,train)
mean(pred1 == train$quality)
summary(model1)
library(randomForest)
model1<-randomForest(quality~alcohol+sulphates+chlorides,data= train,ntrees = 500)
?randomForest
pred1<-predict(model1,train)
mean(pred1 == train$quality)
summary(model1)
library(randomForest)
model1<-randomForest(quality~alcohol+sulphates+chlorides,data= train,ntrees = 500)
?randomForest
pred1<-predict(model1,train)
mean(pred1 == train$quality)
summary(model1)
conf<-model1$confusion
library(randomForest)
model1<-randomForest(quality~alcohol+sulphates+chlorides,data= train,ntrees = 500)
?randomForest
pred1<-predict(model1,train)
mean(pred1 == train$quality)
summary(model1)
conf<-model1$confusion
conf
ggplot(aes(x = test$quality,y = pred1))+
geom_abline()+
geom_point()
ggplot(aes(x = test$quality,y = pred1),
data = data.frame(actual =test$quality,pred1 =predict(model1,train) )
geom_abline()+
ggplot(aes(x = test$quality,y = pred1),
data = data.frame(actual =test$quality,pred1 =predict(model1,train))
geom_abline()+
ggplot(aes(x = test$quality,y = pred1),
data = data.frame(actual =test$quality,pred1 =predict(model1,train)))
ggplot(aes(x = test$quality,y = pred1),
data = data.frame(actual =test$quality,pred1 =predict(model1,test)))
geom_abline()+
geom_point()
ggplot(aes(x = test$quality,y = pred1),
data = data.frame(actual =test$quality,pred1 =predict(model1,test)))+
geom_abline()+
geom_point()
library(randomForest)
model1<-randomForest(log(quality)~alcohol+sulphates+chlorides,data= train,ntrees = 500)
?randomForest
pred1<-predict(model1,train)
mean(pred1 == train$quality)
summary(model1)
conf<-model1$confusion
conf
ggplot(aes(x = log(test$quality),y = log(pred1)),
data = data.frame(actual =test$quality,pred1 =predict(model1,test)))+
geom_abline()+
geom_point()
ggplot(aes(x = test$quality,y = pred1),
data = data.frame(actual =test$quality,pred1 =predict(model1,test)))+
geom_abline()+
geom_point()
library(randomForest)
model1<-randomForest(quality~.,data= train,ntrees = 500)
?randomForest
pred1<-predict(model1,train)
mean(pred1 == train$quality)
summary(model1)
conf<-model1$confusion
conf
ggplot(aes(x = test$quality,y = pred1),
data = data.frame(actual =test$quality,pred1 =predict(model1,test)))+
geom_abline()+
geom_point()
#its time to try xgboost.To boost our algorithm to a a better perfomance.
library(xgboost)
dtrain <-
#its time to try xgboost.To boost our algorithm to a a better perfomance.
library(xgboost)
new_tr<-train[,1:11]
head(new_tr)
#its time to try xgboost.To boost our algorithm to a a better perfomance.
library(xgboost)
#new_tr<-train[,1:11]
new_ts<-test[,1:11]
head(new_ts)
labelt<-train$quality
label_t<-test$quality
dtrain<-xgb.DMatrix(data = new_tr,label = labelt)
dtrain<-xgb.DMatrix(data = new_tr,label = labelt)
labelt<-train$quality
label_t<-test$quality
dtrain<-xgb.DMatrix(data = new_tr,label = labelt)
labelt<-train$quality
label_t<-test$quality
head(label_t)
dtest<-xgb.DMatrix(data = new_ts,label = label_t)
library(ggplot2)
library(tidyverse)
library(GGally)
str(Data2)
knitr::opts_chunk$set(echo = TRUE)
#par(mfrow=c(2,5))
for (i in 1:length(Data1)) {
boxplot(Data1[,i], main=names(Data1[i]), type="l")
}
library(outliers)
library(outliers)
rm.outlier(Data1$sulphates, fill = FALSE, median = FALSE, opposite = FALSE)
library(outliers)
rm.outlier(Data1$sulphates, fill = FALSE, median = FALSE, opposite = FALSE)
View(model)
library(GGally)
ggcorr(Data1)
corrplot::corrplot()
library(GGally)
ggcorr(Data1)
library(corrplot)
heatmap(cor(Data1))
library(GGally)
ggcorr(Data1)
library(corrplot)
heatmap(Data1)
library(GGally)
ggcorr(Data1)
library(corrplot)
heatmap(Data1)
library(GGally)
ggcorr(Data1)
library(corrplot)
#heatmap(Data1)
?heatmap
library(GGally)
ggcorr(Data1)
library(corrplot)
#heatmap(Data1)
corrplot::corrplot(cor(Data1))
